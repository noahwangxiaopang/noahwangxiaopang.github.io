<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>旺小胖&#39;s Tech-Blog</title>
  
  
  <link href="https://noahwangxiaopang.github.io/atom.xml" rel="self"/>
  
  <link href="https://noahwangxiaopang.github.io/"/>
  <updated>2021-08-19T11:04:00.869Z</updated>
  <id>https://noahwangxiaopang.github.io/</id>
  
  <author>
    <name>旺小胖</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式</title>
    <link href="https://noahwangxiaopang.github.io/2021/08/19/cksiwtuof0003t0un0b4tbn8n/"/>
    <id>https://noahwangxiaopang.github.io/2021/08/19/cksiwtuof0003t0un0b4tbn8n/</id>
    <published>2021-08-19T10:53:06.000Z</published>
    <updated>2021-08-19T11:04:00.869Z</updated>
    
    <content type="html"><![CDATA[<h4 id="设计模式介绍"><a href="#设计模式介绍" class="headerlink" title="设计模式介绍"></a><strong>设计模式介绍</strong></h4><p>设计模式是由GOF在1994年出版的<br>Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素）书中总结的最佳实践。</p><p>主要是基于以下的面向对象设计原则。</p><ul><li>对接口编程而不是对实现编程。</li><li>优先使用对象组合而不是继承。</li></ul><p>在书中总结了23种设计模式，分成三大类创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns），另外一类J2EE设计模式。</p><span id="more"></span> <p><strong>创建型模式（Creational Patterns）</strong><br>创建对象时，隐藏创建逻辑的方式，不是用new运算符直接实例化对象，这样使得程序根据给定实例创建哪些对象更加灵活。IOC的本质就是工厂模式。（<em>对象怎么来</em>）</p><ul><li>工厂模式（Factory Pattern）</li><li>抽象工厂模式（Abstract Factory Pattern）</li><li>单例模式（Singleton Pattern）*</li><li>建造者模式（Builder Pattern）</li><li>原型模式（Prototype Pattern）</li></ul><p><strong>结构型模式（Structural Patterns）</strong><br>主要关注类和对象的组合，继承的概念被用来组合接口和定义组合对象获得新功能的方式。（<em>对象和谁有关</em>）</p><ul><li>适配器模式（Adapter Pattern）</li><li>桥接模式（Bridge Pattern）</li><li>过滤器模式（Filter、Criteria Pattern）</li><li>组合模式（Composite Pattern）</li><li>装饰器模式（Decorator Pattern）</li><li>外观模式（Facade Pattern）</li><li>享元模式（Flyweight Pattern）</li><li>代理模式（Proxy Pattern）</li></ul><p><strong>行为型模式</strong><br>主要关注对象之间的通信<br>（<em>对象与对象在干嘛</em>）</p><ul><li>责任链模式（Chain of Responsibility Pattern）</li><li>命令模式（Command Pattern）</li><li>解释器模式（Interpreter Pattern）</li><li>迭代器模式（Iterator Pattern）</li><li>中介者模式（Mediator Pattern）</li><li>备忘录模式（Memento Pattern）</li><li>观察者模式（Observer Pattern）</li><li>状态模式（State Pattern）</li><li>空对象模式（Null Object Pattern）</li><li>策略模式（Strategy Pattern）</li><li>模板模式（Template Pattern）</li><li>访问者模式（Visitor Pattern）</li></ul><p><strong>J2EE模式</strong><br>这些模式主要关注表示层，这些模式是由 Sun Java Center 鉴定的。<br>（<em>对象合起来要干嘛</em>）</p><ul><li>MVC 模式（MVC Pattern）</li><li>业务代表模式（Business Delegate Pattern）设计模式</li><li>组合实体模式（Composite Entity Pattern）</li><li>数据访问对象模式（Data Access Object Pattern）</li><li>前端控制器模式（Front Controller Pattern）</li><li>拦截过滤器模式（Intercepting Filter Pattern）</li><li>服务定位器模式（Service Locator Pattern）</li><li>传输对象模式（Transfer Object Pattern）</li></ul><p>设计模式关系图<br><img src="/images/design.jpg"><br><img src="/2021/08/19/cksiwtuof0003t0un0b4tbn8n/design.jpg"> </p><img src="/2021/08/19/cksiwtuof0003t0un0b4tbn8n/08/19/cksiwtuof0003t0un0b4tbn8n/design.jpg" class title="设计模式"><p>设计模式六大原则<br>1、开闭原则（Open Close Principle）<br>对扩展开放，对修关闭。（接口和抽象类实现）（<br>实现热插拔，提高扩展性）<br>2、里氏代换原则（Liskov Substitution Principle）<br>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。（实现抽象的规范，实现子父类互相替换）<br>3、依赖倒转原则（Dependence Inversion Principle）<br>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。（针对接口编程，实现开闭原则的基础；）<br>4、接口隔离原则（Interface Segregation Principle）<br>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。（降低耦合度，接口单独设计，互相隔离；）<br>5、迪米特法则，又称最少知道原则（Demeter Principle）最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。6、合成复用原则（Composite Reuse Principle）合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。<br>（又称不知道原则：功能模块尽量独立；）<br>6、合成复用原则（Composite Reuse Principle）合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。<br>（尽量使用聚合，组合，而不是继承；）</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;设计模式介绍&quot;&gt;&lt;a href=&quot;#设计模式介绍&quot; class=&quot;headerlink&quot; title=&quot;设计模式介绍&quot;&gt;&lt;/a&gt;&lt;strong&gt;设计模式介绍&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;设计模式是由GOF在1994年出版的&lt;br&gt;Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素）书中总结的最佳实践。&lt;/p&gt;
&lt;p&gt;主要是基于以下的面向对象设计原则。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对接口编程而不是对实现编程。&lt;/li&gt;
&lt;li&gt;优先使用对象组合而不是继承。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在书中总结了23种设计模式，分成三大类创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns），另外一类J2EE设计模式。&lt;/p&gt;</summary>
    
    
    
    
    <category term="设计模式" scheme="https://noahwangxiaopang.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>我写博客了</title>
    <link href="https://noahwangxiaopang.github.io/2021/08/17/cksiwtuob0001t0un2tkna29n/"/>
    <id>https://noahwangxiaopang.github.io/2021/08/17/cksiwtuob0001t0un2tkna29n/</id>
    <published>2021-08-16T16:04:52.000Z</published>
    <updated>2021-08-16T16:09:18.870Z</updated>
    
    <content type="html"><![CDATA[<h3 id="我的博客开通了"><a href="#我的博客开通了" class="headerlink" title="我的博客开通了"></a>我的博客开通了</h3><p><del><u><em>开通了</em></u></del></p><span id="more"></span> <hr><p>现在开始写博客</p><blockquote><p>写点什么了</p></blockquote><p><code>写点代码吧</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码在这里</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;我的博客开通了&quot;&gt;&lt;a href=&quot;#我的博客开通了&quot; class=&quot;headerlink&quot; title=&quot;我的博客开通了&quot;&gt;&lt;/a&gt;我的博客开通了&lt;/h3&gt;&lt;p&gt;&lt;del&gt;&lt;u&gt;&lt;em&gt;开通了&lt;/em&gt;&lt;/u&gt;&lt;/del&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="category" scheme="https://noahwangxiaopang.github.io/categories/category/"/>
    
    
    <category term="博客" scheme="https://noahwangxiaopang.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
